{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Why Kriten?","text":""},{"location":"#infrastructure-automation-is-hard","title":"Infrastructure Automation is Hard","text":"<p>Infrastructure teams are usually organised by discipline; Server, Network, Storage for example. Automation routines have to work cross-domains to provide a service. Kriten allows engineers to publish their own routines, using the languages and tools that best suit. Consumers can run the routines by calling an authorised API endpoint. Kriten creates the endpoint and runs the code on a Kubernetes cluster, engineers can focus on their code. A full RBAC scheme is provided to control who can modify or run code.</p> <p></p>"},{"location":"#it-works-on-my-laptop","title":"It works on my laptop","text":"<p>IT professionals have been coding scripts to simplify tasks for many years. The challenge is how to make them available to other consumers.</p> <p>The consumers need:</p> <ul> <li>A simple and consistent way to run the code.</li> </ul> <p>The developers need:</p> <ul> <li>A simple way to publish the code.</li> <li>A simple way to integrate with other systems.</li> </ul> <p>The infratructure owners need:</p> <ul> <li>A consistent way to ensure authentication and authorisation.</li> <li>Assurance that secrets and sensitve data is not exposed.</li> <li>Audit trail.</li> <li>A reliable and scalable platform.</li> </ul>"},{"location":"#genius-is-making-complex-ideas-simple-not-making-simple-ideas-complex","title":"\u201cGenius is making complex ideas simple, not making simple ideas complex.\u201d","text":"<p>Code in any language can be published in 2 steps (or less in some cases).  Kriten takes care of building an API endpoint that consumers can use to run the code. The code is run on Kubernetes, leveraging the scalability, reliability and portability benefits, but after installation no Kubernetes knowledge is needed.</p>"},{"location":"#open-source","title":"Open-source","text":"<p>As custodians, we are committed to maintaining and improving Kriten. It is free to use, without limitation. To fund continued development, we have support options for bug-fix and feature development.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#prerequisites-and-guidelines","title":"Prerequisites and Guidelines","text":"<ul> <li>Installation into dedicated kubernetes cluster or namespace is recommended to limit access to Kriten resources for administrators only:</li> <li>No other workloads beside Kriten running in cluster/namespace.</li> <li>Kubernetes and Helm access restricted to cluster/namespace for administrators only.</li> <li>Kubernetes 1.21+</li> <li>Helm v3+</li> </ul>"},{"location":"install/#helm-install","title":"Helm install","text":"<p>The Chart can be installed by adding the helm repo to your system.</p> <p>Kriten can be installed along with local PostgreSQL database (recommended for Dev and UAT environments) or with external PostgreSQL database (recommended for production use).</p> <p>Kriten supports local authenticator and Microsoft AD authenticator at same time. If no Microsoft AD authenticator enabled and configured, only local authentication will take place.</p> <p>Helm install with values.yaml modified for target configuration:</p>"},{"location":"install/#add-helm-repo","title":"Add helm repo","text":"<pre><code>helm repo add kriten https://kriten-io.github.io/kriten-charts/\nhelm repo update\n</code></pre>"},{"location":"install/#copy-valuesyaml-if-necessary-and-edit-myvaluesyaml","title":"Copy values.yaml (if necessary) and edit myvalues.yaml","text":"<p><code>helm show values kriten/kriten &gt; myvalues.yaml</code></p>"},{"location":"install/#install","title":"Install","text":"<p><code>helm install -f myvalues.yaml kriten kriten/kriten -n kriten --create-namespace</code></p> <p>or</p> <p><code>helm install kriten kriten/kriten -n kriten --create-namespace</code></p>"},{"location":"install/#macbook-install","title":"MacBook Install","text":"<p>Install kubectl: Install and Set Up kubectl on macOS</p> <p>Install Helm: Installing Helm</p> <p>Install Docker Desktop: Install Docker Desktop on Mac</p> <p>In Docker Desktop settings, enable Kubernetes from the settings page.</p> <p>When Docker Desktop has restarted, you should have a config file in $HOME/.kube Check that you have the docker-desktop context and switch to it, and check kubectl is working: <pre><code>kubectl config get-contexts\nkubectl config use-context docker-desktop\nSwitched to context \"docker-desktop\".\n\nkubectl get nodes\nNAME             STATUS   ROLES           AGE    VERSION\ndocker-desktop   Ready    control-plane   7m4s   v1.32.2\n</code></pre></p> <p>Add the Kriten helm repo: <pre><code>helm repo add kriten https://kriten-io.github.io/kriten-charts/\nhelm repo update\n</code></pre></p> <p>Add nodeports: <pre><code>kubectl apply -n kriten -f - &lt;&lt;EOF\napiVersion: v1\nkind: Service\nmetadata:  \n  name: kriten-nodeport\nspec:\n  selector:    \n    app: kriten\n  type: NodePort\n  ports:  \n  - name: http\n    port: 80\n    targetPort: 8080\n    nodePort: 30040\n---\napiVersion: v1\nkind: Service\nmetadata:  \n  name: kriten-frontend-nodeport\nspec:\n  selector:    \n    app: kriten-frontend\n  type: NodePort\n  ports:  \n  - name: http\n    port: 80\n    targetPort: 80\n    nodePort: 30050\nEOF\n</code></pre></p> <p>Set an environment variable to the IP address of your macbook: <pre><code>export IP_ADDRESS=&lt;your_ip_address&gt;\n</code></pre></p> <p>Use helm to install Kriten and the frontend: <pre><code>helm install kriten kriten/kriten -n kriten \\\n--set frontend.enabled=true \\\n--set frontend.backendAddress=$IP_ADDRESS':30040'  \\\n--set frontend.image.repository=kubecodeio/kriten-frontend \\\n--set frontend.image.tag=\"latest\" \\\n--namespace kriten --create-namespace\n</code></pre></p> <p>You should now be able to connect to the Kriten API: <pre><code>curl -c ./token.txt -X POST 'http://'$IP_ADDRESS':30040/api/v1/login' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"username\": \"root\",\n  \"password\": \"root\",\n  \"provider\": \"local\"\n}' \n</code></pre></p> <p>Which returns a token: <pre><code>{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJvb3QiLCJ1c2VyX2lkIjoiODJkOTg4NGItZmIxZC00MmQ4LTgxM2MtZTJlYjY1ZDllYmMzIiwicHJvdmlkZXIiOiJsb2NhbCIsImV4cCI6MTc0MTQ1OTkwMn0.zerwoMCIYHM4qE5k3h2rw9chwtWhrr2568zh2_1x5SY\"}\n</code></pre></p> <p>Browse to \"http://\"$IP_ADDRESS\":30050\". </p>"},{"location":"install/#helm-chart-parameters","title":"Helm Chart Parameters","text":"Parameter Description Default <code>ingress.enabled</code> Ingress configuration enabled <code>false</code> <code>ingress.className</code> Ingress class name <code>\"nginx\"</code> <code>ingress.hosts[0].host</code> Ingress host name <code>\"example.com\"</code> <code>frontend.enabled</code> Set to true to install GUI <code>false</code> <code>frontend.backendAddress</code> URL for the backend ingress <code>\"example.com\"</code> <code>replicaCount</code> Number of desired Kriten pods <code>1</code> <code>image.repository</code> Kriten Docker image repository <code>\"kubecodeio/kriten\"</code> <code>image.tag</code> Kriten Docker image tag <code>\"latest\"</code> <code>image.pullPolicy</code> Pull policy for Kriten Docker image <code>\"IfNotPresent\"</code> <code>imagePullSecrets</code> Kubernetes secrets to pull container images from private repository <code>[\"name\": \"dockerhub]</code> <code>name</code> Kriten deployment name <code>\"kriten\"</code> <code>namespace</code> Namespace for Kriten <code>\"kriten\"</code> <code>serviceAccount.create</code> Specifies whether a service account should be created for Kriten <code>true</code> <code>serviceAccount.annotations</code> Annotations to add to the service account <code>{}</code> <code>serviceAccount.name</code> The name of the service account to use, if not set and create true, a name is generated using the fullname template <code>\"\"</code> <code>service.type</code> Kriten k8s service type <code>ClusterIP</code> <code>service.port</code> Kriten k8s service port <code>80</code> <code>ldap.enabled</code> LDAP/AD authenticator enabled <code>false</code> <code>ldap.binUser</code> LDAP/AD bind account name <code>\"\"</code> <code>ldap.bindPass</code> LDAP/AD bind account password <code>\"\"</code> <code>ldap.fqdn</code> LDAP/AD service IP or FQDN <code>\"\"</code> <code>ldap.port</code> LDAP/AD access TCP port (389 or 639 for TLS) <code>389</code> <code>ldap.baseDN</code> LDAP/AD base DN <code>\"\"</code> <code>jwt.key</code> Private key or secret to sign issued JWT <code>\"\"</code> <code>jwt.expiry_seconds</code> JWT expiry in seconds <code>3600</code> <code>postgresql.install</code> PostgreSQL installed as part of Kriten installation if set to true, or use external if false <code>true</code> <code>postgresql.host</code> PostgreSQL Host for internal or external depending on postgresql.install parameter <code>\"kriten-community-postgresql\"</code> <code>postgresql.port</code> PostgreSQL TCP port <code>5432</code> <code>postgresql.image.registry</code> PostgreSQL Docker image registry <code>docker.io</code> <code>postgresql.image.repository</code> PostgreSQL Docker image repository <code>bitnami/postgresql</code> <code>postgresql.image.tag</code> PostgreSQL image tag <code>\"16\"</code> <code>postgresql.auth.username</code> PostgreSQL username <code>kriten</code> <code>postgresql.auth.password</code> PostgreSQL password <code>kriten</code> <code>postgresql.auth.database</code> PostgreSQL database name <code>kriten</code> <code>postgresql.persistence.enabled</code> PostgreSQL database persistnce storage enabled <code>true</code>"},{"location":"overview/","title":"Kriten","text":""},{"location":"overview/#kriten-overview","title":"Kriten overview","text":"<p>Kriten is a code execution platform. It is written for and runs on kubernetes as a cloud native application. Kriten exposes containerized applications written in any modern languagues as no-code REST API endpoint, with local or/and AD authentication and granular RBAC it allows requester to execute that code as a kubernetes job and to get result asynchronously or synchronously. </p> <p>Key features:</p> <ul> <li>No-code REST API exposure of custom application and scripts execution.</li> <li>Local or/and AD user authentication (Community edition provides only Local authentication).</li> <li>Granular RBAC to permission CRUD operations against Kriten configured objects.</li> <li>Kriten scales with Kubernetes.</li> </ul>"},{"location":"overview/#configuration-flow","title":"Configuration flow","text":"<p>Runner -&gt; Task -&gt; Job</p> <p>Permission to perform configuration activities against those objects is granted to local or AD users via local Group membership and controlled via granular RBAC.</p>"},{"location":"overview/#minimum-application-changes","title":"Minimum Application changes","text":"<p>For application to run on Kriten only minimum optional changes are needed, if application consumes secrets or needs input parameters:</p> <ul> <li>If target application needs secret(s), those are supplied at the time of Task creation as Key/Value pairs and will be stored as Kubernetes Secrets. At the time of execution of a Job against that Task, a K8s Job container will get those secrets mapped as files in /etc/secret directory and as Environmental Vars. Application would need to read those files or Environmental vars to use secrets.</li> <li>If target application needs input parameters for execution, those are supplied at the time of Job submission and mapped as Environmental var 'EXTRA_VARS' inside K8s Job container. Application will need to read environmental var 'EXTRA_VAR' in format of json to consume those parameters.</li> </ul>"},{"location":"overview/#components","title":"Components","text":""},{"location":"overview/#runner","title":"Runner","text":"<p>Runner object defines the following: * Git project repository, branch and access password/token if repository is private. * Container image with all libraries, packages and dependencies, needed to run application(s) in the repository.</p>"},{"location":"overview/#task","title":"Task","text":"<p>Task is a child object of Runner and defines the following: * Command to execute application or script from associated by Runner repository at the time of starting k8s job container. * Secrets are optionally provided, which are stored as kubernetes secrets and mapped to k8s job containers at the time of execution as files in /etc/secret/ directory or as environmental vars. * Schema in OpenAPI specification is optionally provided, which allows Kriten to validate input parameters against schema and deny job creation if those are not matching the schema.</p> <p>Multiple tasks can be associated with the same Runner. It allows exposing same script or application with different parameters as separate tasks, i.e. one allowing only perform read kind operation and another to do write operation and to control via RBAC, which users are allowed to execute jobs against those tasks.</p> <p>Kriten supports two modes for tasks: synchronous and asynchronous, controlled by parameter \u201csynchronous\u201d: \u201ctrue|false\u201d. In synchronous mode, Kriten will wait a period of time for a job completion (default is 20 seconds after start of the job container) and will return result back. In asynchronous mode, on successful submission of a job, Kriten will return job id, which then will need to be queried to get result of that job.</p> <p>Kriten can return custom data in a result of a job by capturing json string printed as stdout output by application/script delimited by \"^JSON\u201d.</p>"},{"location":"overview/#job","title":"Job","text":"<p>Jobs are triggered against defined Tasks. Permission is controlled via RBAC.</p> <p>Executor of a Job may need to supply Input parameters as it may be required by application or script at the time of execution as optionally defined in schema. Those Input parameters are provided in the body of REST API request and mapped to k8s job containers as Environmental var 'EXTRA_VARS' as a json string.</p>"},{"location":"roadmap/mcp_server/","title":"AI - MCP Server","text":""},{"location":"roadmap/mcp_server/#tldr","title":"TLDR;","text":"<p>Kriten MCP server let's you connect your LLM client (ChatGPT, Claude etc) to you company's data. So you can ask things like: \"How many switches are running NX-OS 10.2(1)?\" for example, and the client will ask the Kriten MCP Server to get the data by running a job.</p>"},{"location":"roadmap/mcp_server/#why-is-kriten-a-good-platform-for-this-feature","title":"Why is Kriten a good platform for this feature?","text":"<p>Kriten can run any code securely, with full RBAC. As it is a Kubernetes application writen in golang, it will scale accordingly.</p>"},{"location":"roadmap/mcp_server/#when-will-it-be-ready","title":"When will it be ready?","text":"<p>We are planning a beta release for Q3 2025.</p> <p></p>"},{"location":"roadmap/webhooks/","title":"Webhooks","text":""},{"location":"roadmap/webhooks/#tldr","title":"TLDR;","text":"<p>Many systems generate webhooks. Kriten webhooks feature let's you configure a webhook receiver that runs a Kriten job when triggered. Alerts from observability tools can trigger jobs to collect diagnostic data for example.</p>"},{"location":"roadmap/webhooks/#why-is-kriten-a-good-platform-for-this-feature","title":"Why is Kriten a good platform for this feature?","text":"<p>Kriten can run any code securely, with full RBAC. As it is a Kubernetes application writen in golang, it will scale accordingly.</p>"},{"location":"roadmap/webhooks/#when-will-it-be-ready","title":"When will it be ready?","text":"<p>We are planning first release for Q3 2025.</p>"},{"location":"user_guide/api_tokens/","title":"API Tokens","text":"<p>Programmatic access to Kriten is provided via API tokens (keys). API tokens are generated per user and adhere RBAC rules.</p> <p>To generate API token, a user need to have a valid login into Kriten. Following CRUD operations are available for the users:</p> <ul> <li>Add API token</li> </ul> <pre><code>POST /api/v1/api_tokens\n</code></pre> <p>Body of request:</p> <pre><code>{\n    \"description\": \"My persional API Token\",\n    \"enabled\": true,\n    \"expires\": \"2024-09-13T13:54:06Z\"\n}\n</code></pre> <p>API token object fields reference:</p> Key Description <code>description</code> (Optional) description of the API token <code>enabled</code> (Optional) state of the API token - true or false, if not specified default will be True <code>expires</code> (Optional) If not specified, will never expire - data will be defaulted to 0000-01-01 <p>Response json body:</p> <pre><code>{\n    \"id\": \"c38ef92a-522e-41bb-ae5b-ab29a16727d4\",\n    \"owner\": \"d9acf53d-6d9e-46ec-b352-2e99086ecb97\",\n    \"key\": \"kri_rbaurEcVyGJIjRioWIaiT3WteVh8ndlVQAEl\",\n    \"description\": \"My personal API Token\",\n    \"created_at\": \"2024-09-13T13:58:03.430602592Z\",\n    \"updated_at\": \"2024-09-13T13:58:03.430602592Z\",\n    \"expires\": \"2024-09-13T13:54:06.283Z\",\n    \"enabled\": true\n}\n</code></pre> Key Description <code>id</code> Unique API token identifier, used for operations against token after creation <code>key</code> *API Token value <code>owner</code> User unique ID, owner of the token <code>description</code> Description of the API token <code>enabled</code> Token is enabled and can be used <code>expires</code> Expiry date and time <code>created_at</code> Date and time, when Token was created <code>updated_at</code> Date and time, when Token was last updated <p>Content of field <code>key</code> is actual API Token only returned once at the time of Token creation. Token is automatically encryped at store and won't be shown again.</p> <p>Example using API token with curl command:</p> <pre><code>curl --header 'Token:kri_rbaurEcVyGJIjRioWIaiT3WteVh8ndlVQAEl' -X GET $KRITEN_URL'/api/v1/runners'\n</code></pre> <ul> <li>List API tokens</li> </ul> <pre><code>GET /api/v1/api_tokens\n</code></pre> <p>For non-admin user only own API tokens will be returned, if RBAC permissions not granted to get all.</p> <p>Admin user will see all tokens by following query:</p> <pre><code>GET /api/v1/api_tokens/all\n</code></pre> <ul> <li>Update API token</li> </ul> <pre><code>PATCH /api/v1/api_tokens/c38ef92a-522e-41bb-ae5b-ab29a16727d4\n</code></pre> <p>Update method can modify description, enabled and expires fields.</p> <ul> <li>Delete API token</li> </ul> <pre><code>DELETE /api/v1/api_tokens/c38ef92a-522e-41bb-ae5b-ab29a16727d4\n</code></pre>"},{"location":"user_guide/cronjobs/","title":"Cronjob objects","text":"<p>Any task in Kriten can be executed on repatable schedule via cronjob object.</p> <p>API documentation is available via swagger $KRITEN_URL/swagger/index.html</p> <p>where $KRITEN_URL is set to the URL of your Kriten instance.</p>"},{"location":"user_guide/cronjobs/#configure-cronjob-for-kriten-task","title":"Configure cronjob for Kriten task","text":"<p>Let's take simple python script \"hello-kriten\" from examples in https://github.com/kriten-io/kriten-community-toolkit repo. First, create a \"hello-kriten\" task, which is documented in Getting Started section of User Guide.</p> <p>Checking that \"hello-kriten\" task has been created.</p> <ul> <li>Login: </li> </ul> <pre><code>curl -c ./token.txt -X POST $KRITEN_URL'/api/v1/login' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"username\": \"root\",\n  \"password\": \"root\",\n  \"provider\": \"local\"\n}' \n</code></pre> <ul> <li>Get task hello-kriten:</li> </ul> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/tasks/hell-kriten' \\\n--header 'Content-Type: application/json'\n</code></pre> <p>Returns: <pre><code>{\"name\":\"hello-kriten\",\n \"runner\":\"python\",\n \"command\":\"python examples/hello-kriten/hello-kriten.py\",\n \"synchronous\":false}\n</code></pre></p> <ul> <li>Create cronjob object for \"hello-kriten\" task</li> </ul> <p>Let's create cronjob object to run \"hello-kriten\" with following extra_vars parameters every 5 minutes.</p> <pre><code>curl -b ./token.txt -X POST $KRITEN_URL'/api/v1/cronjobs' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"hello-kriten-cronjob\",\n    \"task\": \"hello-kriten\",\n    \"schedule\": \"*/5 * * * *\",\n    \"disable\": false,\n    \"extra_vars\": {\n        \"agent_name\": \"Ethan Hunt\",\n        \"operation\":\"Mission impossible\"\n    }\n}' \n</code></pre> Key Description <code>name</code> unique name of the cronjob object <code>task</code> existing task name to be executed on schedule <code>schedule</code> schedule based on Cron syntax <code>disabled</code> boolean true or false - disables cronjob, default is set to false <code>extra_vars</code> input parameters, exposed to custom code via EXTRA_VARS env var as json string <ul> <li>Cron syntax:</li> </ul> <pre><code># \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n# \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n# \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n# \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12)\n# \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6) (Sunday to Saturday)\n# \u2502 \u2502 \u2502 \u2502 \u2502                                   OR sun, mon, tue, wed, thu, fri, sat\n# \u2502 \u2502 \u2502 \u2502 \u2502\n# \u2502 \u2502 \u2502 \u2502 \u2502\n# * * * * *\n</code></pre> <ul> <li>Observing result</li> </ul> <p>Cronjob object executes task as a job as per defined schedule, every 5 minutes in this example</p> <ul> <li>Get list of jobs:</li> </ul> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/jobs' \\\n--header 'Content-Type: application/json'\n</code></pre> <p>Returns:</p> <pre><code>[\n    {\n        \"id\": \"hello-kriten-cronjob-29192975\",\n        \"owner\": \"root\",\n        \"start_time\": \"Thu Jul  3 21:35:00 UTC 2025\",\n        \"completion_time\": \"Thu Jul  3 21:35:07 UTC 2025\",\n        \"failed\": 0,\n        \"completed\": 1,\n        \"stdout\": \"\",\n        \"json_data\": null\n    },\n    {\n        \"id\": \"hello-kriten-cronjob-29192970\",\n        \"owner\": \"root\",\n        \"start_time\": \"Thu Jul  3 21:30:00 UTC 2025\",\n        \"completion_time\": \"Thu Jul  3 21:30:07 UTC 2025\",\n        \"failed\": 0,\n        \"completed\": 1,\n        \"stdout\": \"\",\n        \"json_data\": null\n    }\n]\n</code></pre> <p>Jobs are executed every 5 minutes.</p> <ul> <li>Get job result</li> </ul> <p>To get result of any above job:</p> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/jobs/hello-kriten-cronjob-29192975' \\\n--header 'Content-Type: application/json'\n</code></pre> <p>Returns:</p> <pre><code>{\n    \"id\": \"hello-kriten-cronjob-29192975\",\n    \"owner\": \"root\",\n    \"start_time\": \"Thu Jul  3 21:35:00 UTC 2025\",\n    \"completion_time\": \"Thu Jul  3 21:35:07 UTC 2025\",\n    \"failed\": 0,\n    \"completed\": 1,\n    \"stdout\": \"\\n\\n## init container logs\\nCloning into '.'...\\nFrom https://github.com/kriten-io/kriten-community-toolkit.git\\n6533c3d7f4a731f91e4b4db076abdb44bec322b6\\tHEAD\\n6533c3d7f4a731f91e4b4db076abdb44bec322b6\\trefs/heads/main\\n\\n\\n##application container logs \\nHello, Kriten!\\n\\nThis script demonstrates Kriten's capabilities.\\nIt reads input variables (EXTRA_VARS) and secrets, and prints them.\\n\\n\\n^JSON\\n\\n{\\\"extra_vars\\\": {\\\"agent_name\\\": \\\"Ethan Hunt\\\", \\\"operation\\\": \\\"Mission impossible\\\"}, \\\"secrets\\\": {}}\\n^JSON\\n\\n\\n\\nScript completed.\\n\",\n    \"json_data\": {\n        \"extra_vars\": {\n            \"agent_name\": \"Ethan Hunt\",\n            \"operation\": \"Mission impossible\"\n        },\n        \"secrets\": {}\n    }\n}\n</code></pre> <ul> <li>Disable cronjob</li> </ul> <p>To stop cronjob from executing task, set disable to true by updating the cronjob:</p> <pre><code>curl -b ./token.txt -X PATCH $KRITEN_URL'/api/v1/cronjobs/hello-kriten-cronjob' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"hello-kriten-cronjob\",\n    \"task\": \"hello-kriten\",\n    \"schedule\": \"*/5 * * * *\",\n    \"disable\": true,\n    \"extra_vars\": {\n        \"agent_name\": \"Ethan Hunt\",\n        \"operation\":\"Mission impossible\"\n    }\n}' \n</code></pre>"},{"location":"user_guide/getting_started/","title":"Getting Started","text":"<p>This guide will get you started with Kriten. We will use kriten-example repo to demonstrate onboarding a script into kriten and launch it. By the end of this guide, you will learn how to:</p> <ul> <li>login into Kriten</li> <li>create a Runner</li> <li>create a Task</li> <li>launch a job against configured Task</li> </ul> <p>Kriten-community-toolkit public repo contains simple kriten examples (\"https://github.com/kriten-io/kriten-community-toolkit/tree/main/examples\"). We will be using python script hello-kriten.py. That script demonstrates Kriten capability to expose input parameters and secrets to the automation script at the time of execution - this script simply reads them and prints out into Stdout. Input parameters as supplied at the time of launching a job by a user and exposed as EXTRA_VARS json string in the running container, and secrets supplied at the time of creating a runner by the admin user and those secrets stored as kubernetes secrets and exposed to the automation script as ENV VARS &amp; as files in /etc/secret in a running container.</p>"},{"location":"user_guide/getting_started/#login","title":"Login","text":"<p>Kriten requires user to authenticate. After installation the local admin user is created with the following default credentials root/root. </p> <p>To login into Kriten as following:</p> <pre><code>curl -c ./token.txt -X POST $KRITEN_URL'/api/v1/login' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"username\": \"root\",\n  \"password\": \"root\",\n  \"provider\": \"local\"\n}' \n</code></pre> <p>On successful login, Kriten responds with Status 200 and token, which will be stored in ./token.txt file and used in subsequent steps.</p> <p>Token timeout is defined as a configuration parameter at Kriten's installation, default is 3600 sec.</p>"},{"location":"user_guide/getting_started/#create-runner","title":"Create Runner","text":"<p>Runner creates an environment, or one can think of it as Project, and maps following settings:</p> <ul> <li>Git repository and branch (Kriten may need a personal access token or PAT if repository is not public)</li> <li>Container image, containing all required packages to execute target code from this repo</li> <li>Secrets, required for any Tasks in this project, those will be stored as k8s secrets and will be mapped to Job at the time of execution.</li> </ul> <pre><code>curl -b ./token.txt -X POST $KRITEN_URL'/api/v1/runners' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"kriten-examples\",\n  \"image\": \"python:3.9-slim\",\n  \"gitURL\": \"https://github.com/kriten-io/kriten-community-toolkit.git\",\n  \"branch\": \"main\",\n  \"secret\": {\n      \"username\": \"admin\",\n      \"password\": \"P@55w0rd!\",\n      \"super_secret\": \"1234567890!\"\n  }\n}'\n</code></pre> <p>Body fields reference: </p> Key Description <code>name</code> Runner name <code>gitURL</code> Repository with automation scripts and apps <code>token</code> (Optional) token or PAT is needed for non-public repo <code>branch</code> (Optional) Code branch, default is 'main' <code>image</code> Container image from reachable container registry <code>secret</code> Secrets shared with all tasks associated with this runner, map of key/value pairs"},{"location":"user_guide/getting_started/#add-task","title":"Add Task","text":"<p>Runner has been created, now we can create a task. Task creates execution endpoint for the target script.</p> <p>To create task:</p> <pre><code>curl -b ./token.txt -X POST $KRITEN_URL'/api/v1/tasks' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"hello-kriten\",\n  \"runner\": \"kriten-examples\",\n  \"command\": \"python examples/hello-kriten/hello-kriten.py\"\n}'\n</code></pre> <p>As result, there will be REST API endpoint created for task and available for lunching jobs: <code>$KRITEN_URL/api/v1/jobs/hello-kriten</code></p> <p>Body fields reference: </p> Key Description <code>name</code> Task name <code>runner</code> Runner name this Task is a child of <code>command</code> Command to execute automation script with any parameters <code>schema</code> *(Optional) OpenAPI schema to document and validate input parameters expected by automation script <code>synchronous</code> (Optional) If <code>true</code> Kriten will execute Job synchronously with timeout of 25 seconds, otherwise assynchronously, which is default <p>*Schema validates job at the start and prevents launching job if input parameters incorrect or missing.</p>"},{"location":"user_guide/getting_started/#launch-job","title":"Launch Job","text":"<p>Launching Job against that Task can be done by an athenticated user if this user got permissions to do so, defined by RBAC. In this guide we will launch the job as the admin user, which is already authenticated (assuming the token hasn't been expired).  </p> <pre><code>curl -b ./token.txt -X POST $KRITEN_URL'/api/v1/jobs/hello-kriten' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"agent_name\": \"Ethan Hunt\",\n  \"operation\":\"Mission impossible\"\n}'\n</code></pre> <p>That will launch the job against task exposed as REST API endpoint /api/v1/jobs/hello-kriten. Kriten will launch the k8s Job and return Job ID, which then can be used to check statuc of the Job and read result.</p> <p>Example of returned Job ID:</p> <pre><code>{\"id\":\"hello-kriten-ks67g\", \"msg\":\"job executed successfully\"}\n</code></pre> <p>To check the status of the Job and read result:</p> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/jobs/hello-kriten-ks67g' \\\n--header 'Content-Type: application/json'\n</code></pre> <p>Example result: <pre><code>{\n  \"id\": \"hello-kriten-ks67g\",\n  \"owner\": \"root\",\n  \"startTime\": \"Mon Sep 9 17:11:35 UTC 2024\",\n  \"completionTime\": \"Mon Sep 9 17:11:40 UTC 2024\",\n  \"failed\": 0,\n  \"completed\": 1,\n  \"stdout\": \"Hello, Kriten!\\n\\nThis script demonstrates Kriten's capabilities.\\nIt reads input variables (EXTRA_VARS) and secrets, and prints them.\\n\\n\\n^JSON\\n\\n{\\\"extra_vars\\\": {\\\"agent_name\\\": \\\"Ethan Hunt\\\", \\\"operation\\\": \\\"Mission impossible\\\"}, \\\"secrets\\\": {\\\"password\\\": \\\"P@55w0rd!\\\", \\\"username\\\": \\\"admin\\\", \\\"super_secret\\\": \\\"1234567890!\\\"}}\\n^JSON\\n\\n\\n\\nScript completed.\\n\",\n  \"json_data\": {\n    \"extra_vars\": {\n      \"agent_name\": \"Ethan Hunt\",\n      \"operation\": \"Mission impossible\"\n    },\n    \"secrets\": {\n      \"password\": \"P@55w0rd!\",\n      \"super_secret\": \"1234567890!\",\n      \"username\": \"admin\"\n    }\n  }\n}\n</code></pre></p> <p>Kriten has ability to capture json data in the Stdout and return in <code>json_data</code> field, if it surrounded by opening and closing delimiter <code>^JSON</code>.</p> <p>Also, Kriten can print out Stdout of executed Job by appending /log to the above request:</p> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/jobs/hello-kriten-ks67g/log' \\\n--header 'Content-Type: application/json'\n</code></pre> <p>which returns: <pre><code>Hello, Kriten!\n\nThis script demonstrates Kriten's capabilities.\nIt reads input variables (EXTRA_VARS) and secrets, and prints them.\n\n\n^JSON\n\n{\"extra_vars\": {\"agent_name\": \"Ethan Hunt\", \"operation\": \"Mission impossible\"}, \"secrets\": {\"password\": \"P@55w0rd!\", \"username\": \"admin\", \"super_secret\": \"1234567890!\"}}\n^JSON\n\n\n\nScript completed.\n</code></pre></p>"},{"location":"user_guide/manage_secrets/","title":"Secrets","text":""},{"location":"user_guide/manage_secrets/#table-of-content","title":"Table of Content","text":"<ul> <li>Secrets overview</li> <li>Secrets example</li> </ul>"},{"location":"user_guide/manage_secrets/#secrets-overview","title":"Secrets overview","text":"<p>Automation scripts always need secrets, i.e. tokens or credentials to access infrastructure devices, services, etc. Kriten provides facility to store secrets as Kubernetes secrets and makes them available at the time of Job launching as files in /etc/secret directory and also as environmental vars. Secrets are provisioned by admin users and not visible to executors of Tasks.</p> <p>Secrets are associated with Runners. Runner defines execution environment - code repository with automation code, container image with all the packages and dependencies needed to run automation code, etc.</p> <pre><code>POST /api/v1/runners\n</code></pre> <pre><code>{\n  \"name\": \"kriten-examples\",\n  \"image\": \"python:3.9-slim\",\n  \"gitURL\": \"https://github.com/kriten-io/kriten-community-toolkit.git\",\n  \"secret\": {\n      \"username\": \"admin\",\n      \"password\": \"P@55w0rd!\",\n      \"super_secret\": \"1234567890!\"\n  }\n}\n</code></pre> <p>Secrets are defined in the <code>secret</code> field of the runner and can be created at the time of Runner creation or patching (update). After secrets created - they are obfuscated and won't be visible via Kriten.</p> <p>Getting Runner info:</p> <pre><code>GET /api/v1/runners/kriten-example\n</code></pre> <p>Produces response, where secrets are hidden and can't be observed.</p> <pre><code>{\n    \"secret\": {\n        \"password\": \"************\",\n        \"super_secret\": \"************\",\n        \"username\": \"************\"\n    },\n    \"name\": \"kriten-examples\",\n    \"image\": \"python:3.9-slim\",\n    \"gitURL\": \"https://github.com/kriten-io/kriten-community-toolkit.git\",\n    \"token\": \"\",\n    \"branch\": \"main\"\n}\n</code></pre> <p>Kriten provides endpoint for CRUD operation of secrets as <code>/api/v1/runners/$RUNNER_NAME/secret</code>, i.e. for above <code>/api/v1/runners/kriten-examples/secret</code>.</p> <ul> <li>Getting secrets</li> </ul> <pre><code>GET /api/v1/runners/kriten-examples/secret\n</code></pre> <p>Example response body:</p> <pre><code>{\n    \"password\": \"************\",\n    \"super_secret\": \"************\",\n    \"username\": \"************\"\n}\n</code></pre> <ul> <li>Delete all secrets associated with the runner:</li> </ul> <pre><code>DELETE /api/v1/runners/kriten-examples/secret\n</code></pre> <ul> <li>Add secrets to the runner:</li> </ul> <pre><code>POST /api/v1/runners/kriten-examples/secret\n</code></pre> <p>Body of request:</p> <pre><code>{\n    \"username\": \"admin\",\n    \"password\": \"P@55w0rd!\",\n    \"super_secret\": \"1234567890!\"\n}\n</code></pre> <p>That will add those secrets to the <code>kriten-examples</code> runner.</p> <ul> <li>Update secrets</li> </ul> <pre><code>POST /api/v1/runners/kriten-examples/secret\n</code></pre> <p>Body of request:</p> <pre><code>{\n    \"mysecret\": \"sup3r53cr3t!\"\n}\n</code></pre> <p>Following rules are applied at updating secrets:</p> Condition Behaviour secret key and non-empty value already present in stored secrets No change secret key and non-empty value == \"**\" (obfuscated) present or not No change secret key and empty value \"\" for existing secret Delete stored secret with matching key secret key and non-empty value non-existing secret Add new secret"},{"location":"user_guide/manage_secrets/#secrets-example","title":"Secrets Example","text":"<p>We will demonstrate above on example with curl commands. We will create runner with secretes as above, add a new secret to existing secrets and delete that secret after.</p> <ul> <li>Login into Kriten.</li> </ul> <p>We will login into Kriten with default credentials as example.</p> <pre><code>curl -c ./token.txt -X POST $KRITEN_URL'/api/v1/login' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"username\": \"root\",\n  \"password\": \"root\",\n  \"provider\": \"local\"\n}' \n</code></pre> <ul> <li>Create Runner with secrets.</li> </ul> <pre><code>curl -b ./token.txt -X POST $KRITEN_URL'/api/v1/runners' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"kriten-examples\",\n  \"image\": \"python:3.9-slim\",\n  \"gitURL\": \"https://github.com/kriten-io/kriten-community-toolkit.git\",\n  \"secret\": {\n      \"username\": \"admin\",\n      \"password\": \"P@55w0rd!\",\n      \"super_secret\": \"1234567890!\"\n  }\n}'\n</code></pre> <ul> <li>Get secrets.</li> </ul> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/runners/kriten-examples/secret'\n</code></pre> <p>Body of response:</p> <pre><code>{\n    \"password\": \"************\",\n    \"super_secret\": \"************\",\n    \"username\": \"************\"\n}\n</code></pre> <p>We can also observe secrets by getting runner details as following:</p> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/runners/kriten-examples'\n</code></pre> <p>Body of response:</p> <pre><code>{\n    \"secret\": {\n        \"password\": \"************\",\n        \"super_secret\": \"************\",\n        \"username\": \"************\"\n    },\n    \"name\": \"kriten-examples\",\n    \"image\": \"python:3.9-slim\",\n    \"gitURL\": \"https://github.com/kriten-io/kriten-community-toolkit.git\",\n    \"token\": \"\",\n    \"branch\": \"main\"\n}\n</code></pre> <ul> <li>Add new secret to the runner secrets.</li> </ul> <pre><code>curl -b ./token.txt -X POST $KRITEN_URL'/api/v1/runners/kriten-examples/secret' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"mysecret\": \"sup3r53cr3t!\"\n}' \n</code></pre> <p>Body of response, where we can see new secret has been added:</p> <pre><code>{\n    \"mysecret\":\"*************\",\n    \"password\":\"*************\",\n    \"super_secret\":\"*************\",\n    \"username\":\"*************\"\n}\n</code></pre> <ul> <li>Delete individual secret.</li> </ul> <p>To delete <code>mysecret</code> we will POST again, but this time make value as empty string \"\".</p> <pre><code>curl -b ./token.txt -X POST $KRITEN_URL'/api/v1/runners/kriten-examples/secret' \\\n--header 'Content-Type: application/json' \\\n--data '{ \n    \"mysecret\": \"\"\n}' \n</code></pre> <p>Body of response will return secrets without <code>mysecret</code>:</p> <pre><code>{\n    \"password\":\"*************\",\n    \"super_secret\":\"*************\",\n    \"username\":\"*************\"\n}\n</code></pre>"},{"location":"user_guide/rbac/","title":"Roles Based Access Control (RBAC)","text":""},{"location":"user_guide/rbac/#table-of-content","title":"Table of Content","text":"<ul> <li>RBAC overview</li> <li>RBAC Example</li> </ul>"},{"location":"user_guide/rbac/#rbac-overview","title":"RBAC overview","text":"<p>Access to all resource types in Kriten is controlled by flexible and granular RBAC. RBAC controlls \"read\" or \"write\" permission to all resource types in Kriten: Runners, Tasks, Jobs, Users, Groups, Roles and Role Bindings. Key components of RBAC are Users, Groups, Roles and Role Bindings, defined as following:</p> <ul> <li> <p>Users - only local users with provider type 'local' are currently supported in Community Edition. New users are created by root user or by already existing user with RBAC \"write\" permission to manage Users. Any newly created user doesn't have any default permissions other than login into Kriten.</p> </li> <li> <p>Group - permissions are granted by binding roles to local groups, thus user needs to be a member of a group to gain permissions.</p> </li> <li> <p>Role - role defines resource type (supported types are 'runners', 'tasks', 'jobs', 'users', 'roles', 'role_bindings') and array of resources of that type and permission: \"read\" or \"write\", where \"read\" allows only to read, and \"write\" allows everything, including modifications and deletions.</p> <p>There are pre-defined built-in roles, which are created at the time of installation of Kriten and cannot be modified or deleted.</p> Role Name Resource Resource IDs Permission <code>Admin</code> * * write <code>WriteAllRunners</code> runners * write <code>WriteAllTasks</code> tasks * write <code>WriteAllJobs</code> jobs * write <code>WriteAllUsers</code> users * write <code>WriteAllRoles</code> roles * write <code>WriteAllRoleBindings</code> role_bindings * write </li> <li> <p>Role Binding - bind role to a group.</p> <p>Only pre-defined built-in Role Binding installed at the time of Kriten initialization is following, which grants Admin group, containing root user, full access to all resources.</p> Role Binding Name Role Name Subject Name Subject Kind Subject Provider RootAdminAccess Admin Admin groups local </li> </ul> <p>For REST API swagger documentation refer to http://github.com/kriten-io/kriten-docs.</p>"},{"location":"user_guide/rbac/#rbac-example","title":"RBAC Example","text":"<p>We will demonstrate RBAC on \"ansible-command\" example, available in https://github.com/kriten-io/kriten-examples repo. This is a simple ansible playbook, which allows execution of show commands on a network devices or a group of devices in inventory.</p> <p>We will login as root user to create the Runner and the Task as per \"ansible-command\" example.  Only root user will be able to run Jobs against configured Task. We would like to create a new user, i.e. \"user01\" and we want that user to be able to run \"ansible-command\" Task, but not have access to read or modify Runner or Task itself. In example, $KRITEN_URL is set to the URL of your Kriten instance, eg. <code>export KRITEN_URL=http://kriten-community.kriten.io</code>.</p> <ol> <li>Login as root:</li> </ol> <p><pre><code>curl -c ./token.txt $KRITEN_URL'/api/v1/login' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"username\": \"root\",\n  \"password\": \"root\",\n  \"provider\": \"local\"\n}'\n</code></pre> Note: cURL stores token in file ./token.txt, which we will use in all following cURL examples.</p> <ol> <li>Create user \"user01\":</li> </ol> <pre><code>curl -b ./token.txt $KRITEN_URL'/api/v1/users' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"username\": \"user01\",\n  \"password\": \"p@55w0rd\",\n  \"provider\": \"local\"\n}'\n</code></pre> <p>To demonstrate that newly created \"user01\" doesn't have permission to run \"network-command\" task, which confirms below by trying it as logged in user \"user01\":</p> <p>Login to Kriten as user \"user01\":</p> <pre><code>curl -c ./token.txt $KRITEN_URL'/api/v1/login' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"username\": \"user01\",\n  \"password\": \"p@55w0rd\",\n  \"provider\": \"local\"\n}'\n</code></pre> <p>Run task \"network-command\":</p> <pre><code>curl -b ./token.txt $KRITEN_URL'/api/v1/jobs/network-command' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"target_hosts\": \"arista\",\n  \"command\":\"show version\"\n}'\n</code></pre> <p>Response:</p> <p><pre><code>{\n    \"error\": \"unauthorized - user cannot access resource\"\n}\n</code></pre> It confirms that by default any user doesn't have permission to run any task.</p> <ol> <li>Create Group and add user \"user01\" to that group.</li> </ol> <p>Create group \"NetworkReadOnly\":</p> <pre><code>curl -b ./token.txt $KRITEN_URL'/api/v1/groups' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"NetworkReadOnly\",\n    \"provider\": \"local\"\n}'\n</code></pre> <p>Add user \"user01\" into group \"NetworkReadOnly\":</p> <p><pre><code>curl -b ./token.txt $KRITEN_URL'/api/v1/groups/NetworkReadOnly/users' \\\n--header 'Content-Type: application/json' \\\n--data '[\n    {\n        \"name\": \"user01\",\n        \"provider\": \"local\"\n    }\n]'\n</code></pre> As body contains array, one or more users can be assigned to the group at once.</p> <ol> <li>Create a role allowing to \"write\" to resource type \"jobs\" for \"network-command\" task only. That role would allow executing task \"network-command\" (run/execute jobs).  </li> </ol> <pre><code>curl -b ./token.txt $KRITEN_URL'/api/v1/roles' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"NetworkCommandRole\",\n  \"resource\": \"jobs\",\n  \"resources_ids\": [\n      \"network-command\"\n  ],\n  \"access\": \"write\"\n}'\n</code></pre> <ol> <li>Create role binding between role \"NetworkCommandRole\" and user \"user01\".</li> </ol> <pre><code>curl -b ./token.txt $KRITEN_URL'/api/v1/role_bindings' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"NetworkCommandRoleBinding\",\n  \"role_name\": \"NetworkCommandRole\",\n  \"subject_kind\": \"groups\",\n  \"subject_provider\": \"local\",\n  \"subject_name\": \"NetworkReadOnly\"\n}'\n</code></pre> <p>As result \"user01\" is now allowed to run \"network-command\" task.</p> <pre><code>url -b ./token.txt $KRITEN_URL'/api/v1/jobs/network-command' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"target_hosts\": \"arista\",\n  \"command\": \"show version\"\n}'\n</code></pre> <p>Which returns a job identifier. <pre><code>{\"msg\":\"job executed successfully\",\"value\":\"network-command-ks67g\"}\n</code></pre></p> <p>Read the job log: <pre><code>curl -b ./token.txt $KRITEN_URL'/api/v1/jobs/network-command-ks67g/log' \\\n--header 'Content-Type: application/json'\n</code></pre> which returns a message.</p> <pre><code>PLAY [Read extra_vars] *********************************************************\n\nTASK [Reading target hosts from input vars and storing as localhost fact] ******\nok: [localhost]\n\nPLAY [Network Configs Backup] **************************************************\n\nTASK [Set command variable] ****************************************************\nok: [evo-eos02]\n\nTASK [Cisco NXOS Command] ******************************************************\nskipping: [evo-eos02]\n\nTASK [Cisco IOS Command] *******************************************************\nskipping: [evo-eos02]\n\nTASK [Arista EOS Command] ******************************************************\nok: [evo-eos02]\n[WARNING]: Platform linux on host evo-eos02 is using the discovered Python\ninterpreter at /usr/local/bin/python, but future installation of another Python\ninterpreter could change this. See https://docs.ansible.com/ansible/2.9/referen\nce_appendices/interpreter_discovery.html for more information.\n\nTASK [Print command output into stdout] ****************************************\nok: [evo-eos02] =&gt; {\n    \"msg\": [\n        \"Arista vEOS-lab\\nHardware version: \\nSerial number: C56AD1FD5F9532C2FD51A852146109EB\\nHardware MAC address: 0050.56cd.2b91\\nSystem MAC address: 0050.56cd.2b91\\n\\nSoftware image version: 4.27.0F\\nArchitecture: x86_64\\nInternal build version: 4.27.0F-24308433.4270F\\nInternal build ID: 9088210e-613b-47db-b273-7c7b8d45a086\\nImage format version: 1.0\\n\\nUptime: 9 weeks, 4 days, 18 hours and 16 minutes\\nTotal memory: 4002360 kB\\nFree memory: 2737704 kB\"\n    ]\n}\n\nPLAY RECAP *********************************************************************\nevo-eos02                  : ok=3    changed=0    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0   \nlocalhost                  : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0     \n</code></pre>"},{"location":"user_guide/webhooks/","title":"Webhooks","text":"<p>For seamless integrations and to facilitate event driven automation, Webhook receiver capability was added into Kriten as of version 0.5. This version supports webhook integration with Infrahub (https://opsmill.com), Netbox (https://netboxlabs.com).</p> <p>Kriten defines one-to-one mapping between a webhook and a kriten task. On successful webhook event, Kriten executes associated task and passes json body as json string via EXTRA_VARS environmental variable.</p> <p>Webhooks are user defined and mapped to a user, inheriting user RBAC permissions. Webhooks are secured via shared secret, defined per webhook - that secret is used to calculate signature for body of request on sending end and to validate signature on receiving end. Note: Kriten requires shared secret to be provided, it supports only signed content for authentication purpose.</p> <p>Current supported webhook impementations:</p> System HTTP Headers Signature calculation <code>Infrahub</code> \"webhook-timestamp\" - message timestamp, \"webhook-id\" - unique message id, \"webhook-signature\" - calculated signature HMAC256 base64 digest calculated on string concatenation of header fields \"webhook-timestamp\", \"webhook-id\" and json body <code>Netbox</code> \"X-Hook-Signature\" - calculated signature HMAC512 hex digest calculated on json body <p>Note: Any system can add support for Kriten webhook by adhering to one of those implemented options.</p>"},{"location":"user_guide/webhooks/#configure-kriten-webhook-receiver","title":"Configure Kriten webhook receiver","text":"<p>To demonstrate capability of webhook feature, we will be leveraging \"hello-kriten\" example from https://github.com/kriten-io/kriten-community-toolkit repo. This simple python app prints supplied input parameters exposed to it as EXTRA_VARS environmental variable. On webhook event, that variable will be populated with json body from sender. First, create a \"hello-task\" as documented in Getting Started section of User Guide.</p> <p>$KRITEN_URL is set to the URL of your Kriten instance.</p> <ul> <li>Login: </li> </ul> <pre><code>curl -c ./token.txt -X POST $KRITEN_URL'/api/v1/login' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"username\": \"root\",\n  \"password\": \"root\",\n  \"provider\": \"local\"\n}' \n</code></pre> <ul> <li>Get task hello-kriten:</li> </ul> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/tasks/hell-kriten' \\\n--header 'Content-Type: application/json'\n</code></pre> <p>Returns: <pre><code>{\"name\":\"hello-kriten\",\n \"runner\":\"python\",\n \"command\":\"python examples/hello-kriten/hello-kriten.py\",\n \"synchronous\":false}\n</code></pre></p> <ul> <li>Create webhook for \"hello-kriten\" task</li> </ul> <pre><code>curl -b ./token.txt -X POST $KRITEN_URL'/api/v1/webhooks' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"description\": \"Webhook for Hello Kriten task\",\n  \"task\": \"hello-kriten\",\n  \"secret\": \"supersecret\"\n}'\n</code></pre> <p>Returns: <pre><code>{\"id\":\"ad7a3ce6-751e-4d8e-9921-503948f76516\",\n \"owner\":\"3b5890d3-ea33-4cfb-8752-0152916ff0b2\",\n \"secret\":\"supersecret\",\n \"description\":\"Webhook for Hello Kriten task\",\n \"task\":\"hello-kriten\",\n \"created_at\":\"2025-06-30T18:29:51.798623565Z\",\n \"updated_at\":\"2025-06-30T18:29:51.798623565Z\"}\n</code></pre></p> <p>To execute this webhook, sender need to post to URL $KRITEN_URL/api/v1/webhooks/run/$ID, where $ID is \"id\" of above created webhook, and signature calculated with \"secret\".</p>"},{"location":"user_guide/webhooks/#configure-infrahub-webhook","title":"Configure Infrahub webhook","text":"<ul> <li>Create webhook in Infrahub</li> </ul> <p>In Integrations -&gt; Webhooks create Standard Webhook:</p> <p></p> <p>Where changes to Network device in main branch would trigger webhook event. </p> <p>There is a device, fra01-pod1-leaf1:</p> <p></p> <p>To create event we will modify description to \"Arista switch\", as result webhook event will be triggered and event data posted to Kriten webhook receiver, which will execute job against task \"hello-kriten\".</p> <ul> <li>Get list of jobs</li> </ul> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/jobs' \\\n--header 'Content-Type: application/json'\n</code></pre> <p>From the list of jobs we identify ID and status of the latest completed job.</p> <pre><code>[\n    {\n        \"id\": \"hello-kriten-k62hb\",\n        \"owner\": \"root\",\n        \"start_time\": \"Mon Jun 30 21:11:56 UTC 2025\",\n        \"completion_time\": \"Mon Jun 30 21:12:02 UTC 2025\",\n        \"failed\": 0,\n        \"completed\": 1,\n        \"stdout\": \"\",\n        \"json_data\": null\n    }\n]\n</code></pre> <ul> <li>Get job result</li> </ul> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/jobs/hello-kriten-k62hb' \\\n--header 'Content-Type: application/json'\n</code></pre> <p>Returns:</p> <pre><code>{\n    \"id\": \"hello-kriten-k62hb\",\n    \"owner\": \"root\",\n    \"start_time\": \"Mon Jun 30 21:11:56 UTC 2025\",\n    \"completion_time\": \"Mon Jun 30 21:12:02 UTC 2025\",\n    \"failed\": 0,\n    \"completed\": 1,\n    \"json_data\": {\n        \"extra_vars\": {\n            \"account_id\": \"183badb4-c736-e838-3b1d-c5153c211819\",\n            \"branch\": \"main\",\n            \"data\": {\n                \"action\": \"updated\",\n                \"changelog\": {\n                    \"attributes\": {\n                        \"description\": {\n                            \"kind\": \"Text\",\n                            \"name\": \"description\",\n                            \"properties\": {},\n                            \"value\": \"Arista switch\",\n                            \"value_previous\": \"FRA POD1 LEAF1\",\n                            \"value_update_status\": \"updated\"\n                        }\n                    },\n                    \"display_label\": \"fra05-pod1-leaf1\",\n                    \"node_id\": \"183bae51-8895-0067-3b10-c5181069938d\",\n                    \"node_kind\": \"InfraDevice\",\n                    \"relationships\": {}\n                },\n                \"fields\": [\n                    \"description\"\n                ],\n                \"kind\": \"InfraDevice\",\n                \"node_id\": \"183bae51-8895-0067-3b10-c5181069938d\"\n            },\n            \"event\": \"infrahub.node.updated\",\n            \"id\": \"bad56575-c8e4-4e42-a7eb-f58ca9eda042\",\n            \"occured_at\": \"2025-06-30 21:11:54.176727+00:00\"\n        },\n        \"secrets\": {}\n    }\n}\n</code></pre> <p>Field \"extra_vars\" contains unchanged body passed by Infrahub on the event.</p>"},{"location":"user_guide/webhooks/#configure-netbox-webhook","title":"Configure Netbox Webhook","text":"<p>For demonstration purpose, for Netbox we will use the same webhook we created for Infrahub, as we are not doing anything with data passed via webhook, but only priting it out from python script.</p> <ul> <li>Create webhook in Netbox</li> </ul> <p>In Integrations -&gt; Webhooks create a webhook. Define HTTP method POST, provide Kriten webhook URL and secret.</p> <p></p> <ul> <li>Create Event rule</li> </ul> <p>Event Rule defines event, i.e. devide added, removed, updated, and so on and maps it to configured webhook.</p> <p>In Integrations -&gt; Event Rules, create a rule, as example, to trigger event on device update.</p> <p></p> <p>There is device in the Netbox:</p> <p></p> <p>To trigger the event we will modify status of the device from Active to Decommissioning.</p> <ul> <li>Get list of jobs</li> </ul> <pre><code>curl -b ./token.txt -X GET $KRITEN_URL'/api/v1/jobs' \\\n--header 'Content-Type: application/json'\n</code></pre> <p>From the list of jobs we identify ID and status of the latest completed job.</p> <pre><code>[\n    {\n        \"id\": \"hello-kriten-4vgn8\",\n        \"owner\": \"root\",\n        \"start_time\": \"Mon Jun 30 21:57:20 UTC 2025\",\n        \"completion_time\": \"Mon Jun 30 21:57:27 UTC 2025\",\n        \"failed\": 0,\n        \"completed\": 1,\n        \"stdout\": \"\",\n        \"json_data\": null\n    }\n]\n</code></pre> <ul> <li>Get job result</li> </ul> <pre><code>{\n    \"id\": \"hello-kriten-4vgn8\",\n    \"owner\": \"root\",\n    \"start_time\": \"Mon Jun 30 21:57:20 UTC 2025\",\n    \"completion_time\": \"Mon Jun 30 21:57:27 UTC 2025\",\n    \"failed\": 0,\n    \"completed\": 1,\n    \"json_data\": {\n        \"extra_vars\": {\n            \"data\": {\n                \"airflow\": null,\n                \"asset_tag\": null,\n                \"cluster\": null,\n                \"comments\": \"\",\n                \"config_template\": null,\n                \"console_port_count\": 0,\n                \"console_server_port_count\": 0,\n                \"created\": \"2025-05-09T12:50:15.843720Z\",\n                \"custom_fields\": {},\n                \"description\": \"\",\n                \"device_bay_count\": 0,\n                \"device_type\": {\n                    \"description\": \"\",\n                    \"display\": \"cEOS\",\n                    \"id\": 1,\n                    \"manufacturer\": {\n                        \"description\": \"\",\n                        \"display\": \"Arista\",\n                        \"id\": 1,\n                        \"name\": \"Arista\",\n                        \"slug\": \"arista\",\n                        \"url\": \"/api/dcim/manufacturers/1/\"\n                    },\n                    \"model\": \"cEOS\",\n                    \"slug\": \"ceos\",\n                    \"url\": \"/api/dcim/device-types/1/\"\n                },\n                \"display\": \"arista-leaf-01\",\n                \"display_url\": \"/dcim/devices/1/\",\n                \"face\": null,\n                \"front_port_count\": 0,\n                \"id\": 1,\n                \"interface_count\": 0,\n                \"inventory_item_count\": 0,\n                \"last_updated\": \"2025-06-30T21:57:20.216402Z\",\n                \"latitude\": null,\n                \"local_context_data\": null,\n                \"location\": null,\n                \"longitude\": null,\n                \"module_bay_count\": 0,\n                \"name\": \"arista-leaf-01\",\n                \"oob_ip\": null,\n                \"parent_device\": null,\n                \"platform\": null,\n                \"position\": null,\n                \"power_outlet_count\": 0,\n                \"power_port_count\": 0,\n                \"primary_ip\": null,\n                \"primary_ip4\": null,\n                \"primary_ip6\": null,\n                \"rack\": null,\n                \"rear_port_count\": 0,\n                \"role\": {\n                    \"_depth\": 0,\n                    \"description\": \"\",\n                    \"display\": \"leaf\",\n                    \"id\": 1,\n                    \"name\": \"leaf\",\n                    \"slug\": \"leaf\",\n                    \"url\": \"/api/dcim/device-roles/1/\"\n                },\n                \"serial\": \"\",\n                \"site\": {\n                    \"description\": \"\",\n                    \"display\": \"Lab\",\n                    \"id\": 1,\n                    \"name\": \"Lab\",\n                    \"slug\": \"lab\",\n                    \"url\": \"/api/dcim/sites/1/\"\n                },\n                \"status\": {\n                    \"label\": \"Decommissioning\",\n                    \"value\": \"decommissioning\"\n                },\n                \"tags\": [],\n                \"tenant\": null,\n                \"url\": \"/api/dcim/devices/1/\",\n                \"vc_position\": null,\n                \"vc_priority\": null,\n                \"virtual_chassis\": null\n            },\n            \"event\": \"updated\",\n            \"model\": \"device\",\n            \"request_id\": \"05c732a7-58f6-43ec-bbd9-26ce3e83da91\",\n            \"snapshots\": {\n                \"postchange\": {\n                    \"airflow\": null,\n                    \"asset_tag\": null,\n                    \"cluster\": null,\n                    \"comments\": \"\",\n                    \"config_template\": null,\n                    \"console_port_count\": 0,\n                    \"console_server_port_count\": 0,\n                    \"created\": \"2025-05-09T12:50:15.843Z\",\n                    \"custom_fields\": {},\n                    \"description\": \"\",\n                    \"device_bay_count\": 0,\n                    \"device_type\": 1,\n                    \"face\": null,\n                    \"front_port_count\": 0,\n                    \"interface_count\": 0,\n                    \"inventory_item_count\": 0,\n                    \"last_updated\": \"2025-06-30T21:57:20.216Z\",\n                    \"latitude\": null,\n                    \"local_context_data\": null,\n                    \"location\": null,\n                    \"longitude\": null,\n                    \"module_bay_count\": 0,\n                    \"name\": \"arista-leaf-01\",\n                    \"oob_ip\": null,\n                    \"platform\": null,\n                    \"position\": null,\n                    \"power_outlet_count\": 0,\n                    \"power_port_count\": 0,\n                    \"primary_ip4\": null,\n                    \"primary_ip6\": null,\n                    \"rack\": null,\n                    \"rear_port_count\": 0,\n                    \"role\": 1,\n                    \"serial\": \"\",\n                    \"site\": 1,\n                    \"status\": \"decommissioning\",\n                    \"tags\": [],\n                    \"tenant\": null,\n                    \"vc_position\": null,\n                    \"vc_priority\": null,\n                    \"virtual_chassis\": null\n                },\n                \"prechange\": {\n                    \"airflow\": null,\n                    \"asset_tag\": null,\n                    \"cluster\": null,\n                    \"comments\": \"\",\n                    \"config_template\": null,\n                    \"console_port_count\": 0,\n                    \"console_server_port_count\": 0,\n                    \"created\": \"2025-05-09T12:50:15.843Z\",\n                    \"custom_fields\": {},\n                    \"description\": \"\",\n                    \"device_bay_count\": 0,\n                    \"device_type\": 1,\n                    \"face\": null,\n                    \"front_port_count\": 0,\n                    \"interface_count\": 0,\n                    \"inventory_item_count\": 0,\n                    \"latitude\": null,\n                    \"local_context_data\": null,\n                    \"location\": null,\n                    \"longitude\": null,\n                    \"module_bay_count\": 0,\n                    \"name\": \"arista-leaf-01\",\n                    \"oob_ip\": null,\n                    \"platform\": null,\n                    \"position\": null,\n                    \"power_outlet_count\": 0,\n                    \"power_port_count\": 0,\n                    \"primary_ip4\": null,\n                    \"primary_ip6\": null,\n                    \"rack\": null,\n                    \"rear_port_count\": 0,\n                    \"role\": 1,\n                    \"serial\": \"\",\n                    \"site\": 1,\n                    \"status\": \"active\",\n                    \"tags\": [],\n                    \"tenant\": null,\n                    \"vc_position\": null,\n                    \"vc_priority\": null,\n                    \"virtual_chassis\": null\n                }\n            },\n            \"timestamp\": \"2025-06-30T21:57:20.313712+00:00\",\n            \"username\": \"kubecode\"\n        },\n        \"secrets\": {}\n    }\n}\n</code></pre> <p>Where extra_vars field contains unchanged body of event from Netbox.</p>"}]}